{"version":3,"sources":["webpack:///./js/task-1.js"],"names":["pad","value","String","padStart","selector","targetDate","refTimer","document","querySelector","this","h2","days","hours","mins","secs","start","refs","textContent","getDate","getMonth","getFullYear","idInterval","setInterval","currentTime","Date","now","time","Math","floor","getTimesComponents","Number","stop","clearInterval"],"mappings":"+QAiDA,SAASA,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAkCrB,I,WAlFZ,cAAsC,EAAxBC,SAAwB,IAAdC,EAAc,EAAdA,WAAc,oBADzB,MACyB,cAI/B,CACLC,SAAUC,SAASC,cAAcC,KAAKL,UACtCM,GAAIH,SAASC,cAAc,OAC3BG,KAAMJ,SAASC,cAAc,uBAC7BI,MAAOL,SAASC,cAAc,wBAC9BK,KAAMN,SAASC,cAAc,uBAC7BM,KAAMP,SAASC,cAAc,yBAT7BC,KAAKJ,WAAaA,EAClBI,KAAKM,Q,2BAWPA,MAAA,WAAQ,WACYN,KAAKJ,WAIvBI,KAAKO,KAAKN,GAAGO,YAAb,UAAqCR,KAAKJ,WAAWa,UAArD,KACET,KAAKJ,WAAWc,WAAa,GAD/B,IAEIV,KAAKJ,WAAWe,cACpBX,KAAKY,WAAaC,aAAY,WAC5B,IAAMC,EAAcC,KAAKC,MADS,EA6BxC,SAA4BC,GAK1B,IAAMf,EAAOX,EAAI2B,KAAKC,MAAMF,EAAO,QAQ7Bd,EAAQZ,EACZ2B,KAAKC,MAAOF,EAAO,MAAR,OAOPb,EAAOb,EAAI2B,KAAKC,MAAOF,EAAO,KAAR,MAOtBZ,EAAOd,EAAI2B,KAAKC,MAAOF,EAAO,IAAe,MACnD,MAAO,CAAEf,OAAMC,QAAOC,OAAMC,QAvDYe,CADlB,EAAKxB,WAAakB,GAC5BZ,EAH0B,EAG1BA,KAAMC,EAHoB,EAGpBA,MAAOC,EAHa,EAGbA,KAAMC,EAHO,EAGPA,KACfgB,OAAOnB,GAAQmB,OAAOlB,GAASkB,OAAOjB,GAAQiB,OAAOhB,IACtD,GACT,EAAKE,KAAKL,KAAKM,YAAc,EAC7B,EAAKD,KAAKJ,MAAMK,YAAc,EAC9B,EAAKD,KAAKH,KAAKI,YAAc,EAC7B,EAAKD,KAAKF,KAAKG,YAAc,EAC7B,EAAKc,SAGL,EAAKf,KAAKL,KAAKM,YAAcN,EAC7B,EAAKK,KAAKJ,MAAMK,YAAcL,EAC9B,EAAKI,KAAKH,KAAKI,YAAcJ,EAC7B,EAAKG,KAAKF,KAAKG,YAAcH,KAE9B,M,EAELiB,KAAA,WACEC,cAAcvB,KAAKY,YACnBZ,KAAKY,WAAa,M,KAuCR,CAAmB,CAC/BjB,SAAU,WACVC,WAAY,IAAImB,KAAK,oB","file":"main.f47070f0903e8e2ff81a.js","sourcesContent":["class CountdownTimer {\r\n  idInterval = null;\r\n  constructor({ selector, targetDate }) {\r\n    this.targetDate = targetDate;\r\n    this.start();\r\n  }\r\n  refs = {\r\n    refTimer: document.querySelector(this.selector),\r\n    h2: document.querySelector('.h2'),\r\n    days: document.querySelector('[data-value=\"days\"]'),\r\n    hours: document.querySelector('[data-value=\"hours\"]'),\r\n    mins: document.querySelector('[data-value=\"mins\"]'),\r\n    secs: document.querySelector('[data-value=\"secs\"]'),\r\n  };\r\n\r\n  start() {\r\n    const startTime = this.targetDate;\r\n    //     alert(); //дни\r\n    // alert(date.getMonth()); //месяцы\r\n    // alert(date.getFullYear()); //\r\n    this.refs.h2.textContent = `to the ${this.targetDate.getDate()}.${\r\n      this.targetDate.getMonth() + 1\r\n    }.${this.targetDate.getFullYear()}`;\r\n    this.idInterval = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = this.targetDate - currentTime;\r\n      const { days, hours, mins, secs } = getTimesComponents(deltaTime);\r\n      const sum = Number(days) + Number(hours) + Number(mins) + Number(secs);\r\n      if (sum <= 0) {\r\n        this.refs.days.textContent = 0;\r\n        this.refs.hours.textContent = 0;\r\n        this.refs.mins.textContent = 0;\r\n        this.refs.secs.textContent = 0;\r\n        this.stop();\r\n      } else {\r\n        // console.log(`${days}::${hours}::${mins}::${secs}`);\r\n        this.refs.days.textContent = days;\r\n        this.refs.hours.textContent = hours;\r\n        this.refs.mins.textContent = mins;\r\n        this.refs.secs.textContent = secs;\r\n      }\r\n    }, 1000);\r\n  }\r\n  stop() {\r\n    clearInterval(this.idInterval);\r\n    this.idInterval = null;\r\n  }\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\nfunction getTimesComponents(time) {\r\n  /*\r\n   * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n   * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n   */\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n\r\n  /*\r\n   * Оставшиеся часы: получаем остаток от \r\n  предыдущего расчета с помощью оператора\r\n   * остатка % и делим его на количество миллисекунд в одном часе\r\n   * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n   */\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n  );\r\n\r\n  /*\r\n   * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n   * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n   */\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n\r\n  /*\r\n   * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n   * миллисекунд в одной секунде (1000)\r\n   */\r\n\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n  return { days, hours, mins, secs };\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 28, 2021'),\r\n});\r\n"],"sourceRoot":""}